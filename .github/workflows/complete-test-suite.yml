name: Complete Test Suite Runner

on:
  push:
    branches: [ test-ci-cd ]
  pull_request:
    branches: [ test-ci-cd ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_results
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-timeout selenium mysql-connector-python
    
    - name: Wait for MySQL to be ready
      run: |
        echo "⏳ Waiting for MySQL to be ready..."
        while ! mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
          sleep 1
        done
        echo "✅ MySQL is ready!"
    
    - name: Set up test database
      run: |
        echo "🔧 Setting up test database..."
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "
          CREATE DATABASE IF NOT EXISTS test_results;
          USE test_results;
          CREATE TABLE IF NOT EXISTS test_results (
            id INT AUTO_INCREMENT PRIMARY KEY,
            test_name VARCHAR(255) NOT NULL,
            status ENUM('PASSED', 'FAILED', 'SKIPPED') NOT NULL,
            device_type VARCHAR(50),
            screen_resolution VARCHAR(50),
            execution_time TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            error_message TEXT,
            error_link TEXT,
            test_duration FLOAT,
            browser_type VARCHAR(50),
            os_type VARCHAR(50)
          );
          GRANT ALL PRIVILEGES ON test_results.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
        "
        echo "✅ Test database setup complete!"
    
    - name: Set database environment variables
      run: |
        echo "🔧 Setting database environment variables..."
        echo "TEST_DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "TEST_DB_USER=test_user" >> $GITHUB_ENV
        echo "TEST_DB_PASSWORD=test_pass" >> $GITHUB_ENV
        echo "TEST_DB_NAME=test_results" >> $GITHUB_ENV
        echo "TEST_DB_PORT=3306" >> $GITHUB_ENV
    
    - name: Test database connection
      run: |
        echo "🔗 Testing database connection..."
        python test_database_connection.py
      continue-on-error: true
    
    - name: Run comprehensive test suite
      run: |
        echo "🚀 Running Comprehensive Test Suite Runner..."
        python run_all_test_suites.py
      env:
        GITHUB_ACTIONS: true
        TEST_DB_HOST: 127.0.0.1
        TEST_DB_USER: test_user
        TEST_DB_PASSWORD: test_pass
        TEST_DB_NAME: test_results
        TEST_DB_PORT: 3306
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          screenshots/
          *.png
          *.html
          test_logs/
    
    - name: Show test summary
      if: always()
      run: |
        echo "📊 Test Summary:"
        if [ -f "test_summary.txt" ]; then
          cat test_summary.txt
        else
          echo "No test summary file found"
        fi 