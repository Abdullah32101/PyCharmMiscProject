name: Complete Test Suite Runner

on:
  push:
    branches: [ test-ci-cd ]
  pull_request:
    branches: [ test-ci-cd ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_results
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_pass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-timeout selenium mysql-connector-python
    
    - name: Wait for MySQL to be ready
      run: |
        echo "⏳ Waiting for MySQL to be ready..."
        while ! mysqladmin ping -h"127.0.0.1" -P"3306" --silent; do
          sleep 1
        done
        echo "✅ MySQL is ready!"
    
    - name: Set up test database
      run: |
        echo "🔧 Setting up test database..."
        mysql -h 127.0.0.1 -P 3306 -u root -proot -e "
          CREATE DATABASE IF NOT EXISTS test_results;
          USE test_results;
          
          -- Create test_results table with correct schema
          CREATE TABLE IF NOT EXISTS test_results (
            id INT AUTO_INCREMENT PRIMARY KEY,
            test_case_name VARCHAR(255) NOT NULL,
            module_name VARCHAR(255) NOT NULL,
            test_status ENUM('PASSED', 'FAILED', 'SKIPPED', 'ERROR') NOT NULL,
            test_datetime DATETIME NOT NULL,
            error_message TEXT,
            error_summary VARCHAR(255),
            total_time_duration DECIMAL(10,3) NULL COMMENT 'Test execution time in seconds',
            device_name VARCHAR(50) NULL COMMENT 'Device type (mobile/desktop/tablet)',
            screen_resolution VARCHAR(50) NULL COMMENT 'Screen resolution (e.g., 1920x1080, 375x812)',
            error_link VARCHAR(500) NULL COMMENT 'URL link to screenshot showing affected screen',
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Create users table
          CREATE TABLE IF NOT EXISTS users (
            id INT AUTO_INCREMENT PRIMARY KEY,
            username VARCHAR(100) NOT NULL UNIQUE,
            email VARCHAR(255) NOT NULL UNIQUE,
            password_hash VARCHAR(255) NOT NULL,
            first_name VARCHAR(100),
            last_name VARCHAR(100),
            university VARCHAR(255),
            user_type ENUM('student', 'teacher', 'admin') DEFAULT 'student',
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Create books table
          CREATE TABLE IF NOT EXISTS books (
            id INT AUTO_INCREMENT PRIMARY KEY,
            title VARCHAR(255) NOT NULL,
            author VARCHAR(255),
            isbn VARCHAR(50),
            publisher VARCHAR(255),
            publication_year INT,
            price DECIMAL(10,2),
            description TEXT,
            category VARCHAR(100),
            is_available BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
          );
          
          -- Create orders table
          CREATE TABLE IF NOT EXISTS orders (
            id INT AUTO_INCREMENT PRIMARY KEY,
            order_number VARCHAR(50) NOT NULL UNIQUE,
            user_id INT,
            book_id INT NULL,
            order_type VARCHAR(50) NOT NULL,
            amount DECIMAL(10,2) NOT NULL,
            payment_method VARCHAR(50),
            payment_status ENUM('pending', 'completed', 'failed', 'refunded') DEFAULT 'pending',
            order_status ENUM('pending', 'processing', 'completed', 'cancelled') DEFAULT 'pending',
            order_date DATETIME DEFAULT CURRENT_TIMESTAMP,
            completed_date DATETIME NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id),
            FOREIGN KEY (book_id) REFERENCES books(id)
          );
          
          -- Create subscriptions table
          CREATE TABLE IF NOT EXISTS subscriptions (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NOT NULL,
            subscription_type VARCHAR(50) NOT NULL,
            status ENUM('active', 'cancelled', 'expired') DEFAULT 'active',
            start_date DATE NOT NULL,
            end_date DATE NOT NULL,
            amount DECIMAL(10,2) NOT NULL,
            auto_renew BOOLEAN DEFAULT TRUE,
            payment_method VARCHAR(50),
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            FOREIGN KEY (user_id) REFERENCES users(id)
          );
          
          -- Insert test data
          INSERT IGNORE INTO users (username, email, password_hash, first_name, last_name, university, user_type) 
          VALUES ('test_user', 'test@example.com', 'test_hash', 'Test', 'User', 'Test University', 'student');
          
          INSERT IGNORE INTO books (title, author, isbn, publisher, publication_year, price, description, category) 
          VALUES ('Test Book for Automation', 'Test Author', '978-TEST-1234', 'Test Publisher', 2024, 49.99, 'Test book for automation testing', 'Test Category');
          
          GRANT ALL PRIVILEGES ON test_results.* TO 'test_user'@'%';
          FLUSH PRIVILEGES;
        "
        echo "✅ Test database setup complete!"
    
    - name: Set database environment variables
      run: |
        echo "🔧 Setting database environment variables..."
        echo "TEST_DB_HOST=127.0.0.1" >> $GITHUB_ENV
        echo "TEST_DB_USER=test_user" >> $GITHUB_ENV
        echo "TEST_DB_PASSWORD=test_pass" >> $GITHUB_ENV
        echo "TEST_DB_NAME=test_results" >> $GITHUB_ENV
        echo "TEST_DB_PORT=3306" >> $GITHUB_ENV
    
    - name: Test database connection
      run: |
        echo "🔗 Testing database connection..."
        python test_database_connection.py
      continue-on-error: true
    
    - name: Run comprehensive test suite
      run: |
        echo "🚀 Running Comprehensive Test Suite Runner..."
        python run_all_test_suites.py
      env:
        GITHUB_ACTIONS: true
        TEST_DB_HOST: 127.0.0.1
        TEST_DB_USER: test_user
        TEST_DB_PASSWORD: test_pass
        TEST_DB_NAME: test_results
        TEST_DB_PORT: 3306
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results
        path: |
          screenshots/
          *.png
          *.html
          test_logs/
    
    - name: Show test summary
      if: always()
      run: |
        echo "📊 Test Summary:"
        if [ -f "test_summary.txt" ]; then
          cat test_summary.txt
        else
          echo "No test summary file found"
        fi 