name: Scheduled Test Runner

on:
  schedule:
    # Run comprehensive tests every day at 6 AM UTC
    - cron: '0 6 * * *'
    # Run tests every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:
    inputs:
      test_suite:
        description: 'Test suite to run'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - mobile
        - desktop
        - database

env:
  PYTHON_VERSION: '3.9'
  HEADLESS: 'true'

jobs:
  scheduled-testing:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_framework
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install Chrome and dependencies
      run: |
        wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
        echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
        sudo apt-get update
        sudo apt-get install -y google-chrome-stable default-mysql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-html pytest-xdist pytest-cov coverage

    - name: Setup database
      run: |
        mkdir -p db
        cat > db/db_config.py << EOF
        DB_CONFIG = {
            'host': '127.0.0.1',
            'user': 'test_user',
            'password': 'test_password',
            'database': 'test_framework',
            'port': 3306
        }
        EOF
        python init_database.py
        python create_tables.py

    - name: Run all test suites
      if: github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite == ''
      run: |
        echo "🧪 Running comprehensive test suite..."
        echo "📅 Test Time: $(date)"
        echo "🖥️ Environment: Ubuntu Latest"
        echo "🐍 Python: ${{ env.PYTHON_VERSION }}"
        echo "🔧 Headless Mode: ${{ env.HEADLESS }}"
        echo ""
        
        # Run all tests with detailed reporting
        pytest tests/ \
          --html=test_reports/scheduled_report_$(date +%Y%m%d_%H%M%S).html \
          --self-contained-html \
          --junitxml=test_reports/scheduled_junit_$(date +%Y%m%d_%H%M%S).xml \
          --cov=. \
          --cov-report=html:test_reports/coverage_$(date +%Y%m%d_%H%M%S) \
          --cov-report=term-missing \
          -v \
          --tb=short \
          --durations=10

    - name: Run mobile-specific tests
      if: github.event.inputs.test_suite == 'mobile'
      run: |
        echo "📱 Running mobile-specific tests..."
        export MOBILE_TEST=true
        export TEST_DEVICES="iPhone X,iPad Pro,Samsung Galaxy S21"
        
        pytest tests/ \
          --html=test_reports/mobile_report_$(date +%Y%m%d_%H%M%S).html \
          --self-contained-html \
          -v \
          --tb=short

    - name: Run desktop-specific tests
      if: github.event.inputs.test_suite == 'desktop'
      run: |
        echo "🖥️ Running desktop-specific tests..."
        export TEST_DEVICES="desktop"
        
        pytest tests/ \
          --html=test_reports/desktop_report_$(date +%Y%m%d_%H%M%S).html \
          --self-contained-html \
          -v \
          --tb=short

    - name: Run database tests
      if: github.event.inputs.test_suite == 'database'
      run: |
        echo "🗄️ Running database integration tests..."
        
        pytest test_db_*.py \
          --html=test_reports/database_report_$(date +%Y%m%d_%H%M%S).html \
          --self-contained-html \
          -v \
          --tb=short

    - name: Generate test summary
      run: |
        echo "## 📊 Scheduled Test Results" >> $GITHUB_STEP_SUMMARY
        echo "**Test Suite:** ${{ github.event.inputs.test_suite || 'all' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Execution Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "**Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "test_reports/scheduled_report_$(date +%Y%m%d)*.html" ]; then
          echo "### Test Coverage:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All test suites executed" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Coverage reports generated" >> $GITHUB_STEP_SUMMARY
          echo "- 📸 Screenshots captured for failures" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Framework Status:" >> $GITHUB_STEP_SUMMARY
        echo "- 🟢 Test Framework: Operational" >> $GITHUB_STEP_SUMMARY
        echo "- 🟢 Database Integration: Active" >> $GITHUB_STEP_SUMMARY
        echo "- 🟢 Multi-device Testing: Functional" >> $GITHUB_STEP_SUMMARY
        echo "- 🟢 Error Tracking: Enabled" >> $GITHUB_STEP_SUMMARY

    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: scheduled-test-results-$(date +%Y%m%d)
        path: |
          test_reports/
          screenshots/
        retention-days: 90

    - name: Create test summary issue
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const date = new Date().toISOString().split('T')[0];
          
          let body = `## 🧪 Scheduled Test Run - ${date}\n\n`;
          body += `**Test Suite:** ${context.payload.inputs?.test_suite || 'all'}\n`;
          body += `**Trigger:** ${context.eventName}\n`;
          body += `**Status:** ${context.job === 'success' ? '✅ Passed' : '❌ Failed'}\n\n`;
          
          body += `### Framework Components Tested:\n`;
          body += `- 🖥️ Multi-device testing (Desktop, Mobile, Tablet)\n`;
          body += `- 🗄️ Database integration and connectivity\n`;
          body += `- 📸 Screenshot capture and error tracking\n`;
          body += `- 📊 Test reporting and analytics\n`;
          body += `- 🔗 Error link generation\n\n`;
          
          body += `### Test Artifacts:\n`;
          body += `- HTML reports available in workflow artifacts\n`;
          body += `- Screenshots for failed tests\n`;
          body += `- Coverage reports\n`;
          body += `- JUnit XML reports\n\n`;
          
          body += `---\n`;
          body += `*This issue was automatically generated by the scheduled test runner.*`;
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Scheduled Test Run - ${date}`,
            body: body,
            labels: ['automated', 'testing', 'scheduled']
          }); 